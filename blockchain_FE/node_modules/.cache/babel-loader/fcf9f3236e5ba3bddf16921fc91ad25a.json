{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector, gridVisibleSortedRowEntriesSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowIdsSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel } from './gridFilterUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport const useGridFilter = (apiRef, props) => {\n  var _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.unstable_updateControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: GridEvents.filterModelChange\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.unstable_applyStrategyProcessor('filtering', {\n        isRowMatchingFilters\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent(GridEvents.filteredRowsSet);\n  }, [props.filterMode, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }));\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }));\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => item.value !== undefined);\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.columnField === targetColumnField);\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [{\n          columnField: targetColumnField\n        }];\n      } else {\n        newFilterItems = [...filterItemsWithValue, {\n          columnField: targetColumnField\n        }];\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLinkOperator = React.useCallback(linkOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.linkOperator === linkOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      linkOperator\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback(model => {\n    const currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.setState(mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef));\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getVisibleRowModels = React.useCallback(() => {\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    return new Map(visibleSortedRows.map(row => [row.id, row.model]));\n  }, [apiRef]);\n  const filterApi = {\n    setFilterLinkOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    getVisibleRowModels\n  };\n  useGridApiMethod(apiRef, filterApi, 'GridFilterApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n\n    if (filterModelToExport.items.length === 0 && filterModelToExport.linkOperator === getDefaultGridFilterModel().linkOperator) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.setState(mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef));\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$componentsProp;\n\n      const FilterPanel = props.components.FilterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.filterPanel));\n    }\n\n    return initialValue;\n  }, [props.components.FilterPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {\n      const rowIds = gridRowIdsSelector(apiRef);\n      const filteredRowsLookup = {};\n\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        filteredRowsLookup[rowId] = params.isRowMatchingFilters(rowId);\n      }\n\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.columnField && filterableColumnsLookup[item.columnField]);\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]); // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n\n  useGridApiEventHandler(apiRef, GridEvents.rowsSet, updateFilteredRows);\n  useGridApiEventHandler(apiRef, GridEvents.rowExpansionChange, apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, GridEvents.columnsChange, handleColumnsChange);\n  useGridApiEventHandler(apiRef, GridEvents.activeStrategyProcessorChange, handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};","map":{"version":3,"names":["_extends","React","GridEvents","GridFeatureModeConstant","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridFilterableColumnLookupSelector","GridPreferencePanelsValue","getDefaultGridFilterModel","gridFilterModelSelector","gridVisibleSortedRowEntriesSelector","useFirstRender","gridRowIdsSelector","useGridRegisterPipeProcessor","GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","buildAggregatedFilterApplier","sanitizeFilterModel","mergeStateWithFilterModel","jsx","_jsx","filterStateInitializer","state","props","apiRef","_ref","_props$filterModel","_props$initialState","_props$initialState$f","filterModel","initialState","filter","disableMultipleColumnsFiltering","visibleRowsLookup","filteredDescendantCountLookup","useGridFilter","_props$componentsProp2","logger","current","unstable_updateControlState","stateId","propModel","propOnChange","onFilterModelChange","stateSelector","changeEvent","filterModelChange","updateFilteredRows","useCallback","setState","instanceId","isRowMatchingFilters","filterMode","client","filteringResult","unstable_applyStrategyProcessor","publishEvent","filteredRowsSet","applyFilters","forceUpdate","upsertFilterItem","item","items","itemIndex","findIndex","filterItem","id","push","setFilterModel","deleteFilterItem","itemToDelete","length","showFilterPanel","targetColumnField","debug","filterItemsWithValue","value","undefined","newFilterItems","filterItemOnTarget","find","columnField","showPreferences","filters","hideFilterPanel","hidePreferences","setFilterLinkOperator","linkOperator","model","currentModel","unstable_applyFilters","getVisibleRowModels","visibleSortedRows","Map","map","row","filterApi","stateExportPreProcessing","prevState","filterModelToExport","stateRestorePreProcessing","params","context","_context$stateToResto","stateToRestore","callbacks","preferencePanelPreProcessing","initialValue","_props$componentsProp","FilterPanel","components","componentsProps","filterPanel","flatFilteringMethod","rowIds","filteredRowsLookup","i","rowId","handleColumnsChange","filterableColumnsLookup","handleStrategyProcessorChange","methodName","rowsSet","rowExpansionChange","columnsChange","activeStrategyProcessorChange","useEffect"],"sources":["/Users/yashkothari/project/blockchain_project/node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector, gridVisibleSortedRowEntriesSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowIdsSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel } from './gridFilterUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport const useGridFilter = (apiRef, props) => {\n  var _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.unstable_updateControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: GridEvents.filterModelChange\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.unstable_applyStrategyProcessor('filtering', {\n        isRowMatchingFilters\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent(GridEvents.filteredRowsSet);\n  }, [props.filterMode, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }));\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }));\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => item.value !== undefined);\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.columnField === targetColumnField);\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [{\n          columnField: targetColumnField\n        }];\n      } else {\n        newFilterItems = [...filterItemsWithValue, {\n          columnField: targetColumnField\n        }];\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLinkOperator = React.useCallback(linkOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.linkOperator === linkOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      linkOperator\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback(model => {\n    const currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.setState(mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef));\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getVisibleRowModels = React.useCallback(() => {\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    return new Map(visibleSortedRows.map(row => [row.id, row.model]));\n  }, [apiRef]);\n  const filterApi = {\n    setFilterLinkOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    getVisibleRowModels\n  };\n  useGridApiMethod(apiRef, filterApi, 'GridFilterApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n\n    if (filterModelToExport.items.length === 0 && filterModelToExport.linkOperator === getDefaultGridFilterModel().linkOperator) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.setState(mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef));\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$componentsProp;\n\n      const FilterPanel = props.components.FilterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.filterPanel));\n    }\n\n    return initialValue;\n  }, [props.components.FilterPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {\n      const rowIds = gridRowIdsSelector(apiRef);\n      const filteredRowsLookup = {};\n\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        filteredRowsLookup[rowId] = params.isRowMatchingFilters(rowId);\n      }\n\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.columnField && filterableColumnsLookup[item.columnField]);\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]); // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n\n  useGridApiEventHandler(apiRef, GridEvents.rowsSet, updateFilteredRows);\n  useGridApiEventHandler(apiRef, GridEvents.rowExpansionChange, apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, GridEvents.columnsChange, handleColumnsChange);\n  useGridApiEventHandler(apiRef, GridEvents.activeStrategyProcessorChange, handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}