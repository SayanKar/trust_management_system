{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { GridRowModes, GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nexport const useGridRowEditing = (apiRef, props) => {\n  var _props$experimentalFe2, _props$experimentalFe4;\n\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const columns = useGridSelector(apiRef, gridColumnDefinitionsSelector);\n\n  const buildCallback = callback => function () {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...arguments);\n    }\n  };\n\n  const setRowMode = React.useCallback((id, mode) => {\n    if (mode === apiRef.current.getRowMode(id)) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      const newEditRowsState = _extends({}, state.editRows);\n\n      if (mode === GridRowModes.Edit) {\n        newEditRowsState[id] = {};\n        columns.forEach(column => {\n          const cellParams = apiRef.current.getCellParams(id, column.field);\n\n          if (cellParams.isEditable) {\n            newEditRowsState[id][column.field] = {\n              value: cellParams.value\n            };\n          }\n        });\n      } else {\n        delete newEditRowsState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditRowsState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, columns]);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    return editRowsState[id] ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const commitRowChange = React.useCallback(function (id) {\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _props$experimentalFe;\n\n    if (props.editMode === GridEditModes.Cell) {\n      throw new Error(`MUI: You can't commit changes when the edit mode is 'cell'.`);\n    }\n\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    const model = apiRef.current.getEditRowsModel();\n    const editRowProps = model[id];\n\n    if (!editRowProps) {\n      throw new Error(`MUI: Row at id: ${id} is not being edited.`);\n    }\n\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n      const isValid = Object.keys(editRowProps).reduce((acc, field) => {\n        return acc && !editRowProps[field].isValidating && !editRowProps[field].error;\n      }, true);\n\n      if (!isValid) {\n        return false;\n      }\n    }\n\n    const hasFieldWithError = Object.values(editRowProps).some(value => !!value.error);\n\n    if (hasFieldWithError) {\n      return false;\n    }\n\n    const fieldsWithValidator = Object.keys(editRowProps).filter(field => {\n      const column = apiRef.current.getColumn(field);\n      return typeof column.preProcessEditCellProps === 'function';\n    });\n\n    if (fieldsWithValidator.length > 0) {\n      const row = apiRef.current.getRow(id);\n      const validatorErrors = fieldsWithValidator.map(async field => {\n        const column = apiRef.current.getColumn(field);\n        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: editRowProps[field]\n        }));\n        apiRef.current.unstable_setEditCellProps({\n          id,\n          field,\n          props: newEditCellProps\n        });\n        return newEditCellProps.error;\n      });\n      return Promise.all(validatorErrors).then(errors => {\n        if (errors.some(error => !!error)) {\n          return false;\n        }\n\n        apiRef.current.publishEvent(GridEvents.rowEditCommit, id, event);\n        return true;\n      });\n    }\n\n    apiRef.current.publishEvent(GridEvents.rowEditCommit, id, event);\n    return true;\n  }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[params.id];\n    const row = apiRef.current.getRow(params.id);\n    let isValid = true;\n    return new Promise(resolve => {\n      Object.keys(editRow).forEach(async field => {\n        const column = apiRef.current.getColumn(field);\n        let editCellProps = field === params.field ? {\n          value: params.value\n        } : editRow[field]; // setEditCellProps runs the value parser and returns the updated props\n\n        editCellProps = apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: _extends({}, editCellProps, {\n            isValidating: true\n          })\n        });\n\n        if (column.preProcessEditCellProps) {\n          editCellProps = await Promise.resolve(column.preProcessEditCellProps({\n            id: params.id,\n            row,\n            props: _extends({}, editCellProps, {\n              value: field === params.field ? apiRef.current.unstable_parseValue(params.id, field, params.value) : editCellProps.value\n            })\n          }));\n        }\n\n        if (editCellProps.error) {\n          isValid = false;\n        }\n\n        apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: _extends({}, editCellProps, {\n            isValidating: false\n          })\n        });\n      });\n      resolve(isValid);\n    });\n  }, [apiRef]);\n  const rowEditingApi = {\n    setRowMode,\n    getRowMode,\n    commitRowChange,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, rowEditingApi, 'EditRowApi');\n  const handleCellKeyDown = React.useCallback(async (params, event) => {\n    const {\n      cellMode,\n      isEditable\n    } = params;\n\n    if (!isEditable) {\n      return;\n    }\n\n    const isEditMode = cellMode === GridCellModes.Edit;\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    if (isEditMode) {\n      if (event.key === 'Enter') {\n        var _props$experimentalFe3; // TODO: check the return before firing GridEvents.rowEditStop\n        // On cell editing, it won't exits the edit mode with error\n\n\n        const isValid = await apiRef.current.commitRowChange(params.id);\n\n        if (!isValid && (_props$experimentalFe3 = props.experimentalFeatures) != null && _props$experimentalFe3.preventCommitWhileValidating) {\n          return;\n        }\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      } else if (event.key === 'Escape') {\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      }\n    } else if (event.key === 'Enter') {\n      apiRef.current.publishEvent(GridEvents.rowEditStart, rowParams, event);\n    }\n  }, [apiRef, (_props$experimentalFe4 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe4.preventCommitWhileValidating]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n    apiRef.current.publishEvent(GridEvents.rowEditStart, rowParams, event);\n  }, [apiRef]);\n  const handleEditCellPropsChange = React.useCallback(params => {\n    const row = apiRef.current.getRow(params.id);\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[params.id];\n    Object.keys(editRow).forEach(async field => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.preProcessEditCellProps) {\n        const editCellProps = field === params.field ? params.props : editRow[field];\n        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({\n          id: params.id,\n          row,\n          props: editCellProps\n        }));\n        apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: newEditCellProps\n        });\n      } else if (field === params.field) {\n        apiRef.current.unstable_setEditCellProps(params);\n      }\n    });\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    apiRef.current.setRowMode(params.id, GridRowModes.Edit);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback((params, event) => {\n    apiRef.current.setRowMode(params.id, GridRowModes.View);\n\n    if (event.key === 'Enter') {\n      apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, params, event);\n    }\n  }, [apiRef]);\n  const handleRowEditCommit = React.useCallback(id => {\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[id];\n\n    if (!editRow) {\n      throw new Error(`MUI: Row at id: ${id} is not being edited.`);\n    }\n\n    const row = apiRef.current.getRow(id);\n\n    if (row) {\n      let rowUpdate = _extends({}, row);\n\n      Object.keys(editRow).forEach(field => {\n        const column = apiRef.current.getColumn(field);\n        const value = editRow[field].value;\n\n        if (column.valueSetter) {\n          rowUpdate = column.valueSetter({\n            row: rowUpdate,\n            value\n          });\n        } else {\n          rowUpdate[field] = value;\n        }\n      });\n      apiRef.current.updateRows([rowUpdate]);\n    }\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n\n  const commitPropsAndExit = async (params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(async () => {\n      var _nextFocusedCell$curr;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        await apiRef.current.commitRowChange(params.id, event);\n        const rowParams = apiRef.current.getRowParams(params.id);\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      }\n    });\n  };\n\n  const handleCellFocusOut = useEventCallback((params, event) => {\n    commitPropsAndExit(params, event);\n  });\n  const handleColumnHeaderDragStart = useEventCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (!cell) {\n      return;\n    }\n\n    const params = apiRef.current.getCellParams(cell.id, cell.field);\n    commitPropsAndExit(params, {});\n  });\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, buildCallback(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, buildCallback(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.editCellPropsChange, buildCallback(handleEditCellPropsChange));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStart, buildCallback(handleRowEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStop, buildCallback(handleRowEditStop));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditCommit, buildCallback(handleRowEditCommit));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusIn, buildCallback(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, buildCallback(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragStart, buildCallback(handleColumnHeaderDragStart));\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditCommit, props.onRowEditCommit);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStart, props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStop, props.onRowEditStop);\n};","map":{"version":3,"names":["_extends","React","useEventCallback","useGridApiMethod","GridRowModes","GridEditModes","GridCellModes","useGridSelector","gridColumnDefinitionsSelector","gridEditRowsStateSelector","GridEvents","gridFocusCellSelector","useGridApiOptionHandler","useGridApiEventHandler","useGridRowEditing","apiRef","props","_props$experimentalFe2","_props$experimentalFe4","focusTimeout","useRef","nextFocusedCell","columns","buildCallback","callback","editMode","Row","setRowMode","useCallback","id","mode","current","getRowMode","setState","state","newEditRowsState","editRows","Edit","forEach","column","cellParams","getCellParams","field","isEditable","value","forceUpdate","Cell","View","editRowsState","commitRowChange","event","_props$experimentalFe","Error","unstable_runPendingEditCellValueMutation","model","getEditRowsModel","editRowProps","experimentalFeatures","preventCommitWhileValidating","isValid","Object","keys","reduce","acc","isValidating","error","hasFieldWithError","values","some","fieldsWithValidator","filter","getColumn","preProcessEditCellProps","length","row","getRow","validatorErrors","map","newEditCellProps","Promise","resolve","unstable_setEditCellProps","all","then","errors","publishEvent","rowEditCommit","setRowEditingEditCellValue","params","editRow","editCellProps","unstable_parseValue","rowEditingApi","unstable_setRowEditingEditCellValue","handleCellKeyDown","cellMode","isEditMode","rowParams","getRowParams","key","_props$experimentalFe3","rowEditStop","rowEditStart","handleCellDoubleClick","handleEditCellPropsChange","handleRowEditStart","handleRowEditStop","cellNavigationKeyDown","handleRowEditCommit","rowUpdate","valueSetter","updateRows","handleCellFocusIn","commitPropsAndExit","setTimeout","_nextFocusedCell$curr","handleCellFocusOut","handleColumnHeaderDragStart","cell","cellKeyDown","cellDoubleClick","editCellPropsChange","cellFocusIn","cellFocusOut","columnHeaderDragStart","onRowEditCommit","onRowEditStart","onRowEditStop"],"sources":["/Users/yashkothari/project/blockchain_project/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridRowEditing.old.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { GridRowModes, GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nexport const useGridRowEditing = (apiRef, props) => {\n  var _props$experimentalFe2, _props$experimentalFe4;\n\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const columns = useGridSelector(apiRef, gridColumnDefinitionsSelector);\n\n  const buildCallback = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n\n  const setRowMode = React.useCallback((id, mode) => {\n    if (mode === apiRef.current.getRowMode(id)) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      const newEditRowsState = _extends({}, state.editRows);\n\n      if (mode === GridRowModes.Edit) {\n        newEditRowsState[id] = {};\n        columns.forEach(column => {\n          const cellParams = apiRef.current.getCellParams(id, column.field);\n\n          if (cellParams.isEditable) {\n            newEditRowsState[id][column.field] = {\n              value: cellParams.value\n            };\n          }\n        });\n      } else {\n        delete newEditRowsState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditRowsState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, columns]);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    return editRowsState[id] ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const commitRowChange = React.useCallback((id, event = {}) => {\n    var _props$experimentalFe;\n\n    if (props.editMode === GridEditModes.Cell) {\n      throw new Error(`MUI: You can't commit changes when the edit mode is 'cell'.`);\n    }\n\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    const model = apiRef.current.getEditRowsModel();\n    const editRowProps = model[id];\n\n    if (!editRowProps) {\n      throw new Error(`MUI: Row at id: ${id} is not being edited.`);\n    }\n\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n      const isValid = Object.keys(editRowProps).reduce((acc, field) => {\n        return acc && !editRowProps[field].isValidating && !editRowProps[field].error;\n      }, true);\n\n      if (!isValid) {\n        return false;\n      }\n    }\n\n    const hasFieldWithError = Object.values(editRowProps).some(value => !!value.error);\n\n    if (hasFieldWithError) {\n      return false;\n    }\n\n    const fieldsWithValidator = Object.keys(editRowProps).filter(field => {\n      const column = apiRef.current.getColumn(field);\n      return typeof column.preProcessEditCellProps === 'function';\n    });\n\n    if (fieldsWithValidator.length > 0) {\n      const row = apiRef.current.getRow(id);\n      const validatorErrors = fieldsWithValidator.map(async field => {\n        const column = apiRef.current.getColumn(field);\n        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: editRowProps[field]\n        }));\n        apiRef.current.unstable_setEditCellProps({\n          id,\n          field,\n          props: newEditCellProps\n        });\n        return newEditCellProps.error;\n      });\n      return Promise.all(validatorErrors).then(errors => {\n        if (errors.some(error => !!error)) {\n          return false;\n        }\n\n        apiRef.current.publishEvent(GridEvents.rowEditCommit, id, event);\n        return true;\n      });\n    }\n\n    apiRef.current.publishEvent(GridEvents.rowEditCommit, id, event);\n    return true;\n  }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[params.id];\n    const row = apiRef.current.getRow(params.id);\n    let isValid = true;\n    return new Promise(resolve => {\n      Object.keys(editRow).forEach(async field => {\n        const column = apiRef.current.getColumn(field);\n        let editCellProps = field === params.field ? {\n          value: params.value\n        } : editRow[field]; // setEditCellProps runs the value parser and returns the updated props\n\n        editCellProps = apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: _extends({}, editCellProps, {\n            isValidating: true\n          })\n        });\n\n        if (column.preProcessEditCellProps) {\n          editCellProps = await Promise.resolve(column.preProcessEditCellProps({\n            id: params.id,\n            row,\n            props: _extends({}, editCellProps, {\n              value: field === params.field ? apiRef.current.unstable_parseValue(params.id, field, params.value) : editCellProps.value\n            })\n          }));\n        }\n\n        if (editCellProps.error) {\n          isValid = false;\n        }\n\n        apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: _extends({}, editCellProps, {\n            isValidating: false\n          })\n        });\n      });\n      resolve(isValid);\n    });\n  }, [apiRef]);\n  const rowEditingApi = {\n    setRowMode,\n    getRowMode,\n    commitRowChange,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, rowEditingApi, 'EditRowApi');\n  const handleCellKeyDown = React.useCallback(async (params, event) => {\n    const {\n      cellMode,\n      isEditable\n    } = params;\n\n    if (!isEditable) {\n      return;\n    }\n\n    const isEditMode = cellMode === GridCellModes.Edit;\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    if (isEditMode) {\n      if (event.key === 'Enter') {\n        var _props$experimentalFe3;\n\n        // TODO: check the return before firing GridEvents.rowEditStop\n        // On cell editing, it won't exits the edit mode with error\n        const isValid = await apiRef.current.commitRowChange(params.id);\n\n        if (!isValid && (_props$experimentalFe3 = props.experimentalFeatures) != null && _props$experimentalFe3.preventCommitWhileValidating) {\n          return;\n        }\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      } else if (event.key === 'Escape') {\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      }\n    } else if (event.key === 'Enter') {\n      apiRef.current.publishEvent(GridEvents.rowEditStart, rowParams, event);\n    }\n  }, [apiRef, (_props$experimentalFe4 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe4.preventCommitWhileValidating]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n    apiRef.current.publishEvent(GridEvents.rowEditStart, rowParams, event);\n  }, [apiRef]);\n  const handleEditCellPropsChange = React.useCallback(params => {\n    const row = apiRef.current.getRow(params.id);\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[params.id];\n    Object.keys(editRow).forEach(async field => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.preProcessEditCellProps) {\n        const editCellProps = field === params.field ? params.props : editRow[field];\n        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({\n          id: params.id,\n          row,\n          props: editCellProps\n        }));\n        apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: newEditCellProps\n        });\n      } else if (field === params.field) {\n        apiRef.current.unstable_setEditCellProps(params);\n      }\n    });\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    apiRef.current.setRowMode(params.id, GridRowModes.Edit);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback((params, event) => {\n    apiRef.current.setRowMode(params.id, GridRowModes.View);\n\n    if (event.key === 'Enter') {\n      apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, params, event);\n    }\n  }, [apiRef]);\n  const handleRowEditCommit = React.useCallback(id => {\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[id];\n\n    if (!editRow) {\n      throw new Error(`MUI: Row at id: ${id} is not being edited.`);\n    }\n\n    const row = apiRef.current.getRow(id);\n\n    if (row) {\n      let rowUpdate = _extends({}, row);\n\n      Object.keys(editRow).forEach(field => {\n        const column = apiRef.current.getColumn(field);\n        const value = editRow[field].value;\n\n        if (column.valueSetter) {\n          rowUpdate = column.valueSetter({\n            row: rowUpdate,\n            value\n          });\n        } else {\n          rowUpdate[field] = value;\n        }\n      });\n      apiRef.current.updateRows([rowUpdate]);\n    }\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n\n  const commitPropsAndExit = async (params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(async () => {\n      var _nextFocusedCell$curr;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        await apiRef.current.commitRowChange(params.id, event);\n        const rowParams = apiRef.current.getRowParams(params.id);\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      }\n    });\n  };\n\n  const handleCellFocusOut = useEventCallback((params, event) => {\n    commitPropsAndExit(params, event);\n  });\n  const handleColumnHeaderDragStart = useEventCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (!cell) {\n      return;\n    }\n\n    const params = apiRef.current.getCellParams(cell.id, cell.field);\n    commitPropsAndExit(params, {});\n  });\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, buildCallback(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, buildCallback(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.editCellPropsChange, buildCallback(handleEditCellPropsChange));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStart, buildCallback(handleRowEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStop, buildCallback(handleRowEditStop));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditCommit, buildCallback(handleRowEditCommit));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusIn, buildCallback(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, buildCallback(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragStart, buildCallback(handleColumnHeaderDragStart));\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditCommit, props.onRowEditCommit);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStart, props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStop, props.onRowEditStop);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}