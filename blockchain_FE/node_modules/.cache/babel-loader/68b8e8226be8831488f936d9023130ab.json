{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError\n  } = props;\n\n  const runIfEditModeIsRow = callback => function () {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...arguments);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent(GridEvents.rowEditStart, newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n\n      focusTimeout.current = null;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        if (reason) {\n          event.preventDefault(); // Prevent going to the next element in the tab sequence\n        }\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event.key)) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n          return;\n        }\n\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete') {\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStart, newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback((params, event) => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.startRowEditMode({\n      id,\n      fieldToFocus: field\n    });\n\n    if (reason === GridRowEditStartReasons.deleteKeyDown || reason === GridRowEditStartReasons.printableKeyDown) {\n      apiRef.current.setEditCellValue({\n        id,\n        field: field,\n        value: ''\n      }, event);\n    }\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (!ignoreModifications) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications if any field is processing its props.\n      ignoreModifications = Object.values(editingState[id]).some(fieldProps => {\n        return fieldProps.isProcessingProps;\n      });\n    }\n\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusIn, runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStart, runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStop, runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStart, props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStop, props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n      id,\n      fieldToFocus\n    } = params;\n    throwIfNotInMode(id, GridRowModes.View);\n\n    if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n      throw new Error(`MUI: The cell with id=${id} is already in edit mode.`);\n    }\n\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      acc[field] = {\n        value: apiRef.current.getCellValue(id, field),\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  }, [apiRef, throwIfNotInMode, updateOrDeleteRowState]);\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, GridRowModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n\n    const updateFocusedCellIfNeeded = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n    };\n\n    if (ignoreModifications) {\n      updateFocusedCellIfNeeded();\n      updateOrDeleteRowState(id, null);\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n\n    if (isSomeFieldProcessingProps) {\n      return;\n    }\n\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n\n    if (hasSomeFieldWithError) {\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          updateFocusedCellIfNeeded();\n          updateOrDeleteRowState(id, null);\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      updateFocusedCellIfNeeded();\n      updateOrDeleteRowState(id, null);\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateOrDeleteRowState]);\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(resolve => {\n      const promises = [];\n\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        const _editingState$id = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(_ref => {\n        let [thisField, fieldProps] = _ref;\n\n        if (thisField === field) {\n          return;\n        }\n\n        const fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        const _editingState$id2 = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n\n    let rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(_ref2 => {\n      let [field, fieldProps] = _ref2;\n      const column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_toPropertyKey","_extends","React","useGridApiEventHandler","useGridApiOptionHandler","GridEvents","GridEditModes","GridRowModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","gridColumnFieldsSelector","buildWarning","GridRowEditStopReasons","GridRowEditStartReasons","missingOnProcessRowUpdateErrorWarning","useGridRowEditing","apiRef","props","focusTimeout","useRef","nextFocusedCell","processRowUpdate","onProcessRowUpdateError","runIfEditModeIsRow","callback","editMode","Row","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getRowMode","handleCellDoubleClick","event","isEditable","Edit","rowParams","getRowParams","newParams","reason","cellDoubleClick","publishEvent","rowEditStart","handleCellFocusIn","handleCellFocusOut","View","setTimeout","_nextFocusedCell$curr","rowFocusOut","rowEditStop","useEffect","clearTimeout","handleCellKeyDown","cellMode","key","escapeKeyDown","enterKeyDown","columnFields","filter","shiftKey","shiftTabKeyDown","length","tabKeyDown","preventDefault","ctrlKey","metaKey","altKey","printableKeyDown","deleteKeyDown","handleRowEditStart","startRowEditMode","fieldToFocus","setEditCellValue","value","handleRowEditStop","unstable_runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","editingState","state","Object","values","some","fieldProps","isProcessingProps","stopRowEditMode","cellFocusIn","cellFocusOut","cellKeyDown","onRowEditStart","onRowEditStop","Cell","isEditing","keys","updateOrDeleteRowState","newProps","setState","newEditingState","editRows","forceUpdate","updateOrDeleteFieldState","reduce","acc","cellParams","getCellValue","error","setCellFocus","focusedField","updateFocusedCellIfNeeded","unstable_moveFocusToRelativeCell","row","getRow","isSomeFieldProcessingProps","hasSomeFieldWithError","rowUpdate","unstable_getRowWithUpdatedValuesFromRowEditing","handleError","errorThrown","Promise","resolve","then","finalRowUpdate","updateRows","catch","setRowEditingEditCellValue","column","getColumn","parsedValue","valueParser","preProcessEditCellProps","promises","hasChanged","_editingState$id","otherFieldsProps","map","promise","processedProps","push","entries","forEach","thisField","fieldColumn","_editingState$id2","all","getRowWithUpdatedValuesFromRowEditing","valueSetter","editingApi","unstable_setRowEditingEditCellValue"],"sources":["/Users/yashkothari/project/blockchain_project/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridRowEditing.new.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError\n  } = props;\n\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent(GridEvents.rowEditStart, newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n\n      focusTimeout.current = null;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        if (reason) {\n          event.preventDefault(); // Prevent going to the next element in the tab sequence\n        }\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event.key)) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n          return;\n        }\n\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete') {\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason\n        });\n\n        apiRef.current.publishEvent(GridEvents.rowEditStart, newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback((params, event) => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.startRowEditMode({\n      id,\n      fieldToFocus: field\n    });\n\n    if (reason === GridRowEditStartReasons.deleteKeyDown || reason === GridRowEditStartReasons.printableKeyDown) {\n      apiRef.current.setEditCellValue({\n        id,\n        field: field,\n        value: ''\n      }, event);\n    }\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (!ignoreModifications) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications if any field is processing its props.\n      ignoreModifications = Object.values(editingState[id]).some(fieldProps => {\n        return fieldProps.isProcessingProps;\n      });\n    }\n\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusIn, runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStart, runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStop, runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStart, props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStop, props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n      id,\n      fieldToFocus\n    } = params;\n    throwIfNotInMode(id, GridRowModes.View);\n\n    if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n      throw new Error(`MUI: The cell with id=${id} is already in edit mode.`);\n    }\n\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      acc[field] = {\n        value: apiRef.current.getCellValue(id, field),\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  }, [apiRef, throwIfNotInMode, updateOrDeleteRowState]);\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, GridRowModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n\n    const updateFocusedCellIfNeeded = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n    };\n\n    if (ignoreModifications) {\n      updateFocusedCellIfNeeded();\n      updateOrDeleteRowState(id, null);\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n\n    if (isSomeFieldProcessingProps) {\n      return;\n    }\n\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n\n    if (hasSomeFieldWithError) {\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          updateFocusedCellIfNeeded();\n          updateOrDeleteRowState(id, null);\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      updateFocusedCellIfNeeded();\n      updateOrDeleteRowState(id, null);\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateOrDeleteRowState]);\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(resolve => {\n      const promises = [];\n\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        const _editingState$id = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n\n        const fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        const _editingState$id2 = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n\n    let rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}