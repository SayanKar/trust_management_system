{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError\n  } = props;\n\n  const runIfEditModeIsCell = callback => function () {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...arguments);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent(GridEvents.cellEditStart, newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n\n    apiRef.current.publishEvent(GridEvents.cellEditStop, newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent(GridEvents.cellEditStop, newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event.key)) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n          return;\n        }\n\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete') {\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent(GridEvents.cellEditStart, newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback((params, event) => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.startCellEditMode(params);\n\n    if (reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.printableKeyDown) {\n      apiRef.current.setEditCellValue({\n        id,\n        field,\n        value: ''\n      }, event);\n    }\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    let cellToFocusAfter;\n\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (editingState[id][field].isProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications.\n      ignoreModifications = true;\n    }\n\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.cellEditStart, runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.cellEditStop, runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, GridEvents.cellEditStart, props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.cellEditStop, props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    const newProps = {\n      value: apiRef.current.getCellValue(id, field),\n      error: false,\n      isProcessingProps: false\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n\n    const updateFocusedCellIfNeeded = () => {\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n\n    if (ignoreModifications) {\n      updateFocusedCellIfNeeded();\n      updateOrDeleteFieldState(id, field, null);\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n\n    if (error || isProcessingProps) {\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          updateFocusedCellIfNeeded();\n          updateOrDeleteFieldState(id, field, null);\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      updateFocusedCellIfNeeded();\n      updateOrDeleteFieldState(id, field, null);\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateOrDeleteFieldState]);\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    } // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n\n\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    }); // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !editingState[id][field].error;\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      value\n    } = editingState[id][field];\n    const row = apiRef.current.getRow(id);\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromCellEditing: getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n};","map":{"version":3,"names":["_extends","React","useGridApiEventHandler","useGridApiOptionHandler","GridEvents","GridEditModes","GridCellModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","buildWarning","GridCellEditStartReasons","GridCellEditStopReasons","missingOnProcessRowUpdateErrorWarning","useGridCellEditing","apiRef","props","processRowUpdate","onProcessRowUpdateError","runIfEditModeIsCell","callback","editMode","Cell","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getCellMode","handleCellDoubleClick","event","isEditable","cellMode","Edit","newParams","reason","cellDoubleClick","publishEvent","cellEditStart","handleCellFocusOut","View","cellFocusOut","cellEditStop","handleCellKeyDown","key","escapeKeyDown","enterKeyDown","shiftKey","shiftTabKeyDown","tabKeyDown","preventDefault","ctrlKey","metaKey","altKey","printableKeyDown","deleteKeyDown","handleCellEditStart","startCellEditMode","setEditCellValue","value","handleCellEditStop","cellToFocusAfter","ignoreModifications","editingState","state","isProcessingProps","stopCellEditMode","cellKeyDown","onCellEditStart","onCellEditStop","isEditing","updateOrDeleteFieldState","newProps","setState","newEditingState","editRows","Object","keys","length","forceUpdate","getCellValue","error","setCellFocus","unstable_runPendingEditCellValueMutation","updateFocusedCellIfNeeded","unstable_moveFocusToRelativeCell","rowUpdate","unstable_getRowWithUpdatedValuesFromCellEditing","handleError","errorThrown","row","getRow","Promise","resolve","then","finalRowUpdate","updateRows","catch","setCellEditingEditCellValue","column","getColumn","parsedValue","valueParser","preProcessEditCellProps","hasChanged","getRowWithUpdatedValuesFromCellEditing","valueSetter","editingApi","unstable_setCellEditingEditCellValue"],"sources":["/Users/yashkothari/project/blockchain_project/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridCellEditing.new.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError\n  } = props;\n\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent(GridEvents.cellEditStart, newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n\n    apiRef.current.publishEvent(GridEvents.cellEditStop, newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent(GridEvents.cellEditStop, newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event.key)) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n          return;\n        }\n\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete') {\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent(GridEvents.cellEditStart, newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback((params, event) => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.startCellEditMode(params);\n\n    if (reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.printableKeyDown) {\n      apiRef.current.setEditCellValue({\n        id,\n        field,\n        value: ''\n      }, event);\n    }\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    let cellToFocusAfter;\n\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (editingState[id][field].isProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications.\n      ignoreModifications = true;\n    }\n\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.cellEditStart, runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.cellEditStop, runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, GridEvents.cellEditStart, props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.cellEditStop, props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    const newProps = {\n      value: apiRef.current.getCellValue(id, field),\n      error: false,\n      isProcessingProps: false\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n\n    const updateFocusedCellIfNeeded = () => {\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n\n    if (ignoreModifications) {\n      updateFocusedCellIfNeeded();\n      updateOrDeleteFieldState(id, field, null);\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n\n    if (error || isProcessingProps) {\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          updateFocusedCellIfNeeded();\n          updateOrDeleteFieldState(id, field, null);\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      updateFocusedCellIfNeeded();\n      updateOrDeleteFieldState(id, field, null);\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateOrDeleteFieldState]);\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    } // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n\n\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    }); // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !editingState[id][field].error;\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      value\n    } = editingState[id][field];\n    const row = apiRef.current.getRow(id);\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromCellEditing: getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n};"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,sBAAT,EAAiCC,uBAAjC,QAAgE,oCAAhE;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kCAA7C;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,yBAAT,QAA0C,wBAA1C;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,wBAAT,EAAmCC,uBAAnC,QAAkE,2CAAlE;AACA,MAAMC,qCAAqC,GAAGH,YAAY,CAAC,CAAC,sHAAD,EAAyH,0IAAzH,EAAqQ,gFAArQ,CAAD,EAAyV,OAAzV,CAA1D;AACA,OAAO,MAAMI,kBAAkB,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;EACnD,MAAM;IACJC,gBADI;IAEJC;EAFI,IAGFF,KAHJ;;EAKA,MAAMG,mBAAmB,GAAGC,QAAQ,IAAI,YAAa;IACnD,IAAIJ,KAAK,CAACK,QAAN,KAAmBhB,aAAa,CAACiB,IAArC,EAA2C;MACzCF,QAAQ,CAAC,YAAD,CAAR;IACD;EACF,CAJD;;EAMA,MAAMG,kBAAkB,GAAGtB,KAAK,CAACuB,WAAN,CAAkB,CAACC,EAAD,EAAKC,KAAL,KAAe;IAC1D,MAAMC,MAAM,GAAGZ,MAAM,CAACa,OAAP,CAAeC,aAAf,CAA6BJ,EAA7B,EAAiCC,KAAjC,CAAf;;IAEA,IAAI,CAACX,MAAM,CAACa,OAAP,CAAeE,cAAf,CAA8BH,MAA9B,CAAL,EAA4C;MAC1C,MAAM,IAAII,KAAJ,CAAW,yBAAwBN,EAAG,cAAaC,KAAM,mBAAzD,CAAN;IACD;EACF,CAN0B,EAMxB,CAACX,MAAD,CANwB,CAA3B;EAOA,MAAMiB,gBAAgB,GAAG/B,KAAK,CAACuB,WAAN,CAAkB,CAACC,EAAD,EAAKC,KAAL,EAAYO,IAAZ,KAAqB;IAC9D,IAAIlB,MAAM,CAACa,OAAP,CAAeM,WAAf,CAA2BT,EAA3B,EAA+BC,KAA/B,MAA0CO,IAA9C,EAAoD;MAClD,MAAM,IAAIF,KAAJ,CAAW,yBAAwBN,EAAG,cAAaC,KAAM,cAAaO,IAAK,QAA3E,CAAN;IACD;EACF,CAJwB,EAItB,CAAClB,MAAD,CAJsB,CAAzB;EAKA,MAAMoB,qBAAqB,GAAGlC,KAAK,CAACuB,WAAN,CAAkB,CAACG,MAAD,EAASS,KAAT,KAAmB;IACjE,IAAI,CAACT,MAAM,CAACU,UAAZ,EAAwB;MACtB;IACD;;IAED,IAAIV,MAAM,CAACW,QAAP,KAAoBhC,aAAa,CAACiC,IAAtC,EAA4C;MAC1C;IACD;;IAED,MAAMC,SAAS,GAAGxC,QAAQ,CAAC,EAAD,EAAK2B,MAAL,EAAa;MACrCc,MAAM,EAAE9B,wBAAwB,CAAC+B;IADI,CAAb,CAA1B;;IAIA3B,MAAM,CAACa,OAAP,CAAee,YAAf,CAA4BvC,UAAU,CAACwC,aAAvC,EAAsDJ,SAAtD,EAAiEJ,KAAjE;EACD,CAd6B,EAc3B,CAACrB,MAAD,CAd2B,CAA9B;EAeA,MAAM8B,kBAAkB,GAAG5C,KAAK,CAACuB,WAAN,CAAkB,CAACG,MAAD,EAASS,KAAT,KAAmB;IAC9D,IAAIT,MAAM,CAACW,QAAP,KAAoBhC,aAAa,CAACwC,IAAtC,EAA4C;MAC1C;IACD;;IAED,MAAMN,SAAS,GAAGxC,QAAQ,CAAC,EAAD,EAAK2B,MAAL,EAAa;MACrCc,MAAM,EAAE7B,uBAAuB,CAACmC;IADK,CAAb,CAA1B;;IAIAhC,MAAM,CAACa,OAAP,CAAee,YAAf,CAA4BvC,UAAU,CAAC4C,YAAvC,EAAqDR,SAArD,EAAgEJ,KAAhE;EACD,CAV0B,EAUxB,CAACrB,MAAD,CAVwB,CAA3B;EAWA,MAAMkC,iBAAiB,GAAGhD,KAAK,CAACuB,WAAN,CAAkB,CAACG,MAAD,EAASS,KAAT,KAAmB;IAC7D,IAAIT,MAAM,CAACW,QAAP,KAAoBhC,aAAa,CAACiC,IAAtC,EAA4C;MAC1C,IAAIE,MAAJ;;MAEA,IAAIL,KAAK,CAACc,GAAN,KAAc,QAAlB,EAA4B;QAC1BT,MAAM,GAAG7B,uBAAuB,CAACuC,aAAjC;MACD,CAFD,MAEO,IAAIf,KAAK,CAACc,GAAN,KAAc,OAAlB,EAA2B;QAChCT,MAAM,GAAG7B,uBAAuB,CAACwC,YAAjC;MACD,CAFM,MAEA,IAAIhB,KAAK,CAACc,GAAN,KAAc,KAAlB,EAAyB;QAC9BT,MAAM,GAAGL,KAAK,CAACiB,QAAN,GAAiBzC,uBAAuB,CAAC0C,eAAzC,GAA2D1C,uBAAuB,CAAC2C,UAA5F;QACAnB,KAAK,CAACoB,cAAN,GAF8B,CAEN;MACzB;;MAED,IAAIf,MAAJ,EAAY;QACV,MAAMD,SAAS,GAAGxC,QAAQ,CAAC,EAAD,EAAK2B,MAAL,EAAa;UACrCc;QADqC,CAAb,CAA1B;;QAIA1B,MAAM,CAACa,OAAP,CAAee,YAAf,CAA4BvC,UAAU,CAAC4C,YAAvC,EAAqDR,SAArD,EAAgEJ,KAAhE;MACD;IACF,CAnBD,MAmBO,IAAIT,MAAM,CAACU,UAAX,EAAuB;MAC5B,IAAII,MAAJ;;MAEA,IAAIhC,cAAc,CAAC2B,KAAK,CAACc,GAAP,CAAlB,EAA+B;QAC7B,IAAId,KAAK,CAACiB,QAAN,IAAkBjB,KAAK,CAACqB,OAAxB,IAAmCrB,KAAK,CAACsB,OAAzC,IAAoDtB,KAAK,CAACuB,MAA9D,EAAsE;UACpE;QACD;;QAEDlB,MAAM,GAAG9B,wBAAwB,CAACiD,gBAAlC;MACD,CAND,MAMO,IAAIxB,KAAK,CAACc,GAAN,KAAc,OAAlB,EAA2B;QAChCT,MAAM,GAAG9B,wBAAwB,CAACyC,YAAlC;MACD,CAFM,MAEA,IAAIhB,KAAK,CAACc,GAAN,KAAc,QAAlB,EAA4B;QACjCT,MAAM,GAAG9B,wBAAwB,CAACkD,aAAlC;MACD;;MAED,IAAIpB,MAAJ,EAAY;QACV,MAAMD,SAAS,GAAGxC,QAAQ,CAAC,EAAD,EAAK2B,MAAL,EAAa;UACrCc;QADqC,CAAb,CAA1B;;QAIA1B,MAAM,CAACa,OAAP,CAAee,YAAf,CAA4BvC,UAAU,CAACwC,aAAvC,EAAsDJ,SAAtD,EAAiEJ,KAAjE;MACD;IACF;EACF,CA3CyB,EA2CvB,CAACrB,MAAD,CA3CuB,CAA1B;EA4CA,MAAM+C,mBAAmB,GAAG7D,KAAK,CAACuB,WAAN,CAAkB,CAACG,MAAD,EAASS,KAAT,KAAmB;IAC/D,MAAM;MACJX,EADI;MAEJC,KAFI;MAGJe;IAHI,IAIFd,MAJJ;IAKAZ,MAAM,CAACa,OAAP,CAAemC,iBAAf,CAAiCpC,MAAjC;;IAEA,IAAIc,MAAM,KAAK9B,wBAAwB,CAACkD,aAApC,IAAqDpB,MAAM,KAAK9B,wBAAwB,CAACiD,gBAA7F,EAA+G;MAC7G7C,MAAM,CAACa,OAAP,CAAeoC,gBAAf,CAAgC;QAC9BvC,EAD8B;QAE9BC,KAF8B;QAG9BuC,KAAK,EAAE;MAHuB,CAAhC,EAIG7B,KAJH;IAKD;EACF,CAf2B,EAezB,CAACrB,MAAD,CAfyB,CAA5B;EAgBA,MAAMmD,kBAAkB,GAAGjE,KAAK,CAACuB,WAAN,CAAkBG,MAAM,IAAI;IACrD,MAAM;MACJF,EADI;MAEJC,KAFI;MAGJe;IAHI,IAIFd,MAJJ;IAKA,IAAIwC,gBAAJ;;IAEA,IAAI1B,MAAM,KAAK7B,uBAAuB,CAACwC,YAAvC,EAAqD;MACnDe,gBAAgB,GAAG,OAAnB;IACD,CAFD,MAEO,IAAI1B,MAAM,KAAK7B,uBAAuB,CAAC2C,UAAvC,EAAmD;MACxDY,gBAAgB,GAAG,OAAnB;IACD,CAFM,MAEA,IAAI1B,MAAM,KAAK7B,uBAAuB,CAAC0C,eAAvC,EAAwD;MAC7Da,gBAAgB,GAAG,MAAnB;IACD;;IAED,IAAIC,mBAAmB,GAAG3B,MAAM,KAAK,eAArC;IACA,MAAM4B,YAAY,GAAG7D,yBAAyB,CAACO,MAAM,CAACa,OAAP,CAAe0C,KAAhB,CAA9C;;IAEA,IAAID,YAAY,CAAC5C,EAAD,CAAZ,CAAiBC,KAAjB,EAAwB6C,iBAA5B,EAA+C;MAC7C;MACA;MACAH,mBAAmB,GAAG,IAAtB;IACD;;IAEDrD,MAAM,CAACa,OAAP,CAAe4C,gBAAf,CAAgC;MAC9B/C,EAD8B;MAE9BC,KAF8B;MAG9B0C,mBAH8B;MAI9BD;IAJ8B,CAAhC;EAMD,CA/B0B,EA+BxB,CAACpD,MAAD,CA/BwB,CAA3B;EAgCAb,sBAAsB,CAACa,MAAD,EAASX,UAAU,CAACsC,eAApB,EAAqCvB,mBAAmB,CAACgB,qBAAD,CAAxD,CAAtB;EACAjC,sBAAsB,CAACa,MAAD,EAASX,UAAU,CAAC2C,YAApB,EAAkC5B,mBAAmB,CAAC0B,kBAAD,CAArD,CAAtB;EACA3C,sBAAsB,CAACa,MAAD,EAASX,UAAU,CAACqE,WAApB,EAAiCtD,mBAAmB,CAAC8B,iBAAD,CAApD,CAAtB;EACA/C,sBAAsB,CAACa,MAAD,EAASX,UAAU,CAACwC,aAApB,EAAmCzB,mBAAmB,CAAC2C,mBAAD,CAAtD,CAAtB;EACA5D,sBAAsB,CAACa,MAAD,EAASX,UAAU,CAAC4C,YAApB,EAAkC7B,mBAAmB,CAAC+C,kBAAD,CAArD,CAAtB;EACA/D,uBAAuB,CAACY,MAAD,EAASX,UAAU,CAACwC,aAApB,EAAmC5B,KAAK,CAAC0D,eAAzC,CAAvB;EACAvE,uBAAuB,CAACY,MAAD,EAASX,UAAU,CAAC4C,YAApB,EAAkChC,KAAK,CAAC2D,cAAxC,CAAvB;EACA,MAAMzC,WAAW,GAAGjC,KAAK,CAACuB,WAAN,CAAkB,CAACC,EAAD,EAAKC,KAAL,KAAe;IACnD,MAAM2C,YAAY,GAAG7D,yBAAyB,CAACO,MAAM,CAACa,OAAP,CAAe0C,KAAhB,CAA9C;IACA,MAAMM,SAAS,GAAGP,YAAY,CAAC5C,EAAD,CAAZ,IAAoB4C,YAAY,CAAC5C,EAAD,CAAZ,CAAiBC,KAAjB,CAAtC;IACA,OAAOkD,SAAS,GAAGtE,aAAa,CAACiC,IAAjB,GAAwBjC,aAAa,CAACwC,IAAtD;EACD,CAJmB,EAIjB,CAAC/B,MAAD,CAJiB,CAApB;EAKA,MAAM8D,wBAAwB,GAAG5E,KAAK,CAACuB,WAAN,CAAkB,CAACC,EAAD,EAAKC,KAAL,EAAYoD,QAAZ,KAAyB;IAC1E/D,MAAM,CAACa,OAAP,CAAemD,QAAf,CAAwBT,KAAK,IAAI;MAC/B,MAAMU,eAAe,GAAGhF,QAAQ,CAAC,EAAD,EAAKsE,KAAK,CAACW,QAAX,CAAhC;;MAEA,IAAIH,QAAQ,KAAK,IAAjB,EAAuB;QACrBE,eAAe,CAACvD,EAAD,CAAf,GAAsBzB,QAAQ,CAAC,EAAD,EAAKgF,eAAe,CAACvD,EAAD,CAApB,EAA0B;UACtD,CAACC,KAAD,GAAS1B,QAAQ,CAAC,EAAD,EAAK8E,QAAL;QADqC,CAA1B,CAA9B;MAGD,CAJD,MAIO;QACL,OAAOE,eAAe,CAACvD,EAAD,CAAf,CAAoBC,KAApB,CAAP;;QAEA,IAAIwD,MAAM,CAACC,IAAP,CAAYH,eAAe,CAACvD,EAAD,CAA3B,EAAiC2D,MAAjC,KAA4C,CAAhD,EAAmD;UACjD,OAAOJ,eAAe,CAACvD,EAAD,CAAtB;QACD;MACF;;MAED,OAAOzB,QAAQ,CAAC,EAAD,EAAKsE,KAAL,EAAY;QACzBW,QAAQ,EAAED;MADe,CAAZ,CAAf;IAGD,CAlBD;IAmBAjE,MAAM,CAACa,OAAP,CAAeyD,WAAf;EACD,CArBgC,EAqB9B,CAACtE,MAAD,CArB8B,CAAjC;EAsBA,MAAMgD,iBAAiB,GAAG9D,KAAK,CAACuB,WAAN,CAAkBG,MAAM,IAAI;IACpD,MAAM;MACJF,EADI;MAEJC;IAFI,IAGFC,MAHJ;IAIAJ,kBAAkB,CAACE,EAAD,EAAKC,KAAL,CAAlB;IACAM,gBAAgB,CAACP,EAAD,EAAKC,KAAL,EAAYpB,aAAa,CAACwC,IAA1B,CAAhB;IACA,MAAMgC,QAAQ,GAAG;MACfb,KAAK,EAAElD,MAAM,CAACa,OAAP,CAAe0D,YAAf,CAA4B7D,EAA5B,EAAgCC,KAAhC,CADQ;MAEf6D,KAAK,EAAE,KAFQ;MAGfhB,iBAAiB,EAAE;IAHJ,CAAjB;IAKAM,wBAAwB,CAACpD,EAAD,EAAKC,KAAL,EAAYoD,QAAZ,CAAxB;IACA/D,MAAM,CAACa,OAAP,CAAe4D,YAAf,CAA4B/D,EAA5B,EAAgCC,KAAhC;EACD,CAdyB,EAcvB,CAACX,MAAD,EAASQ,kBAAT,EAA6BS,gBAA7B,EAA+C6C,wBAA/C,CAduB,CAA1B;EAeA,MAAML,gBAAgB,GAAGvE,KAAK,CAACuB,WAAN,CAAkBG,MAAM,IAAI;IACnD,MAAM;MACJF,EADI;MAEJC,KAFI;MAGJ0C,mBAHI;MAIJD,gBAAgB,GAAG;IAJf,IAKFxC,MALJ;IAMAK,gBAAgB,CAACP,EAAD,EAAKC,KAAL,EAAYpB,aAAa,CAACiC,IAA1B,CAAhB;IACAxB,MAAM,CAACa,OAAP,CAAe6D,wCAAf,CAAwDhE,EAAxD,EAA4DC,KAA5D;;IAEA,MAAMgE,yBAAyB,GAAG,MAAM;MACtC,IAAIvB,gBAAgB,KAAK,MAAzB,EAAiC;QAC/BpD,MAAM,CAACa,OAAP,CAAe+D,gCAAf,CAAgDlE,EAAhD,EAAoDC,KAApD,EAA2DyC,gBAA3D;MACD;IACF,CAJD;;IAMA,IAAIC,mBAAJ,EAAyB;MACvBsB,yBAAyB;MACzBb,wBAAwB,CAACpD,EAAD,EAAKC,KAAL,EAAY,IAAZ,CAAxB;MACA;IACD;;IAED,MAAM2C,YAAY,GAAG7D,yBAAyB,CAACO,MAAM,CAACa,OAAP,CAAe0C,KAAhB,CAA9C;IACA,MAAM;MACJiB,KADI;MAEJhB;IAFI,IAGFF,YAAY,CAAC5C,EAAD,CAAZ,CAAiBC,KAAjB,CAHJ;;IAKA,IAAI6D,KAAK,IAAIhB,iBAAb,EAAgC;MAC9B;IACD;;IAED,MAAMqB,SAAS,GAAG7E,MAAM,CAACa,OAAP,CAAeiE,+CAAf,CAA+DpE,EAA/D,EAAmEC,KAAnE,CAAlB;;IAEA,IAAIT,gBAAJ,EAAsB;MACpB,MAAM6E,WAAW,GAAGC,WAAW,IAAI;QACjC,IAAI7E,uBAAJ,EAA6B;UAC3BA,uBAAuB,CAAC6E,WAAD,CAAvB;QACD,CAFD,MAEO;UACLlF,qCAAqC;QACtC;MACF,CAND;;MAQA,IAAI;QACF,MAAMmF,GAAG,GAAGjF,MAAM,CAACa,OAAP,CAAeqE,MAAf,CAAsBxE,EAAtB,CAAZ;QACAyE,OAAO,CAACC,OAAR,CAAgBlF,gBAAgB,CAAC2E,SAAD,EAAYI,GAAZ,CAAhC,EAAkDI,IAAlD,CAAuDC,cAAc,IAAI;UACvEtF,MAAM,CAACa,OAAP,CAAe0E,UAAf,CAA0B,CAACD,cAAD,CAA1B;UACAX,yBAAyB;UACzBb,wBAAwB,CAACpD,EAAD,EAAKC,KAAL,EAAY,IAAZ,CAAxB;QACD,CAJD,EAIG6E,KAJH,CAIST,WAJT;MAKD,CAPD,CAOE,OAAOC,WAAP,EAAoB;QACpBD,WAAW,CAACC,WAAD,CAAX;MACD;IACF,CAnBD,MAmBO;MACLhF,MAAM,CAACa,OAAP,CAAe0E,UAAf,CAA0B,CAACV,SAAD,CAA1B;MACAF,yBAAyB;MACzBb,wBAAwB,CAACpD,EAAD,EAAKC,KAAL,EAAY,IAAZ,CAAxB;IACD;EACF,CA1DwB,EA0DtB,CAACX,MAAD,EAASG,uBAAT,EAAkCD,gBAAlC,EAAoDe,gBAApD,EAAsE6C,wBAAtE,CA1DsB,CAAzB;EA2DA,MAAM2B,2BAA2B,GAAGvG,KAAK,CAACuB,WAAN,CAAkB,MAAMG,MAAN,IAAgB;IACpE,MAAM;MACJF,EADI;MAEJC,KAFI;MAGJuC;IAHI,IAIFtC,MAJJ;IAKAJ,kBAAkB,CAACE,EAAD,EAAKC,KAAL,CAAlB;IACAM,gBAAgB,CAACP,EAAD,EAAKC,KAAL,EAAYpB,aAAa,CAACiC,IAA1B,CAAhB;IACA,MAAMkE,MAAM,GAAG1F,MAAM,CAACa,OAAP,CAAe8E,SAAf,CAAyBhF,KAAzB,CAAf;IACA,MAAMsE,GAAG,GAAGjF,MAAM,CAACa,OAAP,CAAeqE,MAAf,CAAsBxE,EAAtB,CAAZ;IACA,IAAIkF,WAAW,GAAG1C,KAAlB;;IAEA,IAAIwC,MAAM,CAACG,WAAX,EAAwB;MACtBD,WAAW,GAAGF,MAAM,CAACG,WAAP,CAAmB3C,KAAnB,EAA0BlD,MAAM,CAACa,OAAP,CAAeC,aAAf,CAA6BJ,EAA7B,EAAiCC,KAAjC,CAA1B,CAAd;IACD;;IAED,IAAI2C,YAAY,GAAG7D,yBAAyB,CAACO,MAAM,CAACa,OAAP,CAAe0C,KAAhB,CAA5C;;IAEA,IAAIQ,QAAQ,GAAG9E,QAAQ,CAAC,EAAD,EAAKqE,YAAY,CAAC5C,EAAD,CAAZ,CAAiBC,KAAjB,CAAL,EAA8B;MACnDuC,KAAK,EAAE0C;IAD4C,CAA9B,CAAvB;;IAIA,IAAIF,MAAM,CAACI,uBAAX,EAAoC;MAClC,MAAMC,UAAU,GAAG7C,KAAK,KAAKI,YAAY,CAAC5C,EAAD,CAAZ,CAAiBC,KAAjB,EAAwBuC,KAArD;MACAa,QAAQ,GAAG9E,QAAQ,CAAC,EAAD,EAAK8E,QAAL,EAAe;QAChCP,iBAAiB,EAAE;MADa,CAAf,CAAnB;MAGAM,wBAAwB,CAACpD,EAAD,EAAKC,KAAL,EAAYoD,QAAZ,CAAxB;MACAA,QAAQ,GAAG,MAAMoB,OAAO,CAACC,OAAR,CAAgBM,MAAM,CAACI,uBAAP,CAA+B;QAC9DpF,EAD8D;QAE9DuE,GAF8D;QAG9DhF,KAAK,EAAE8D,QAHuD;QAI9DgC;MAJ8D,CAA/B,CAAhB,CAAjB;IAMD,CAlCmE,CAkClE;IACF;;;IAGA,IAAI/F,MAAM,CAACa,OAAP,CAAeM,WAAf,CAA2BT,EAA3B,EAA+BC,KAA/B,MAA0CpB,aAAa,CAACwC,IAA5D,EAAkE;MAChE,OAAO,KAAP;IACD;;IAEDuB,YAAY,GAAG7D,yBAAyB,CAACO,MAAM,CAACa,OAAP,CAAe0C,KAAhB,CAAxC;IACAQ,QAAQ,GAAG9E,QAAQ,CAAC,EAAD,EAAK8E,QAAL,EAAe;MAChCP,iBAAiB,EAAE;IADa,CAAf,CAAnB,CA3CoE,CA6ChE;IACJ;IACA;;IAEAO,QAAQ,CAACb,KAAT,GAAiBwC,MAAM,CAACI,uBAAP,GAAiCxC,YAAY,CAAC5C,EAAD,CAAZ,CAAiBC,KAAjB,EAAwBuC,KAAzD,GAAiE0C,WAAlF;IACA9B,wBAAwB,CAACpD,EAAD,EAAKC,KAAL,EAAYoD,QAAZ,CAAxB;IACAT,YAAY,GAAG7D,yBAAyB,CAACO,MAAM,CAACa,OAAP,CAAe0C,KAAhB,CAAxC;IACA,OAAO,CAACD,YAAY,CAAC5C,EAAD,CAAZ,CAAiBC,KAAjB,EAAwB6D,KAAhC;EACD,CArDmC,EAqDjC,CAACxE,MAAD,EAASQ,kBAAT,EAA6BS,gBAA7B,EAA+C6C,wBAA/C,CArDiC,CAApC;EAsDA,MAAMkC,sCAAsC,GAAG9G,KAAK,CAACuB,WAAN,CAAkB,CAACC,EAAD,EAAKC,KAAL,KAAe;IAC9E,MAAM+E,MAAM,GAAG1F,MAAM,CAACa,OAAP,CAAe8E,SAAf,CAAyBhF,KAAzB,CAAf;IACA,MAAM2C,YAAY,GAAG7D,yBAAyB,CAACO,MAAM,CAACa,OAAP,CAAe0C,KAAhB,CAA9C;IACA,MAAM;MACJL;IADI,IAEFI,YAAY,CAAC5C,EAAD,CAAZ,CAAiBC,KAAjB,CAFJ;IAGA,MAAMsE,GAAG,GAAGjF,MAAM,CAACa,OAAP,CAAeqE,MAAf,CAAsBxE,EAAtB,CAAZ;IACA,OAAOgF,MAAM,CAACO,WAAP,GAAqBP,MAAM,CAACO,WAAP,CAAmB;MAC7C/C,KAD6C;MAE7C+B;IAF6C,CAAnB,CAArB,GAGFhG,QAAQ,CAAC,EAAD,EAAKgG,GAAL,EAAU;MACrB,CAACtE,KAAD,GAASuC;IADY,CAAV,CAHb;EAMD,CAb8C,EAa5C,CAAClD,MAAD,CAb4C,CAA/C;EAcA,MAAMkG,UAAU,GAAG;IACjB/E,WADiB;IAEjB6B,iBAFiB;IAGjBS,gBAHiB;IAIjB0C,oCAAoC,EAAEV,2BAJrB;IAKjBX,+CAA+C,EAAEkB;EALhC,CAAnB;EAOAxG,gBAAgB,CAACQ,MAAD,EAASkG,UAAT,EAAqB,YAArB,CAAhB;AACD,CAtUM"},"metadata":{},"sourceType":"module"}