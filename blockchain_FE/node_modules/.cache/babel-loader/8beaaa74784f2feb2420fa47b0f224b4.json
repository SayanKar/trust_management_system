{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridVisibleSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { getVisibleRows, useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\n\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n\n  return [selectionModelProp];\n};\n\nexport const selectionStateInitializer = (state, props) => {\n  var _getSelectionModelPro;\n\n  return _extends({}, state, {\n    selection: (_getSelectionModelPro = getSelectionModelPropValue(props.selectionModel)) != null ? _getSelectionModelPro : []\n  });\n};\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\n\nexport const useGridSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const propSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.selectionModel, gridSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.selectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'selection',\n    propModel: propSelectionModel,\n    propOnChange: props.onSelectionModelChange,\n    stateSelector: gridSelectionStateSelector,\n    changeEvent: GridEvents.selectionChange\n  });\n  const {\n    checkboxSelection,\n    disableMultipleSelection,\n    disableSelectionOnClick,\n    isRowSelectable,\n    pagination,\n    paginationMode\n  } = props;\n  const canHaveMultipleSelection = !disableMultipleSelection || checkboxSelection;\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (isSelected) {\n      const visibleRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n\n      if (startIndex === endIndex) {\n        return;\n      }\n\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const setSelectionModel = React.useCallback(model => {\n    const currentModel = gridSelectionStateSelector(apiRef.current.state);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        selection: model\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const isRowSelected = React.useCallback(id => gridSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback(function (id) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (isRowSelectable && !isRowSelectable(apiRef.current.getRowParams(id))) {\n      return;\n    }\n\n    lastRowToggled.current = id;\n\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n\n      if (isSelected) {\n        newSelection.push(id);\n      }\n\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n      if (isSelectionValid) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback(function (ids) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = isRowSelectable ? ids.filter(id => isRowSelectable(apiRef.current.getRowParams(id))) : ids;\n    let newSelection;\n\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n    if (isSelectionValid) {\n      apiRef.current.setSelectionModel(newSelection);\n    }\n  }, [apiRef, isRowSelectable, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(function (_ref) {\n    let {\n      startId,\n      endId\n    } = _ref;\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`); // Using rows from all pages allow to select a range across several pages\n\n    const allPagesRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionApi = {\n    selectRow,\n    selectRows,\n    selectRowRange,\n    setSelectionModel,\n    getSelectedRows,\n    isRowSelected\n  };\n  useGridApiMethod(apiRef, selectionApi, 'GridSelectionApi');\n  /**\n   * EVENTS\n   */\n\n  const removeOutdatedSelection = React.useCallback(() => {\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef); // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      apiRef.current.setSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey; // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - CTRL is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleCellClick = React.useCallback((params, event) => {\n    if (disableSelectionOnClick) {\n      return;\n    }\n\n    if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n\n    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n\n    if (params.field) {\n      const column = apiRef.current.getColumn(params.field);\n\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandMouseRowRangeSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridVisibleSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    } // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n\n\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n\n    if (event.key.toLowerCase() === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, GridEvents.sortedRowsSet, removeOutdatedSelection);\n  useGridApiEventHandler(apiRef, GridEvents.cellClick, handleCellClick);\n  useGridApiEventHandler(apiRef, GridEvents.rowSelectionCheckboxChange, handleRowSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, GridEvents.headerSelectionCheckboxChange, handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, GridEvents.cellMouseDown, preventSelectionOnShift);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (propSelectionModel !== undefined) {\n      apiRef.current.setSelectionModel(propSelectionModel);\n    }\n  }, [apiRef, propSelectionModel]);\n  const isStateControlled = propSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled) {\n      return;\n    } // isRowSelectable changed\n\n\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(apiRef.current.getRowParams(id)));\n\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled]);\n  React.useEffect(() => {\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      const {\n        rows: currentPageRows\n      } = getVisibleRows(apiRef, {\n        pagination,\n        paginationMode\n      });\n      const currentPageRowsLookup = currentPageRows.reduce((acc, _ref2) => {\n        let {\n          id\n        } = _ref2;\n        acc[id] = true;\n        return acc;\n      }, {});\n      const firstSelectableRow = currentSelection.find(id => {\n        let isSelectable = true;\n\n        if (isRowSelectable) {\n          isSelectable = isRowSelectable(apiRef.current.getRowParams(id));\n        }\n\n        return isSelectable && currentPageRowsLookup[id]; // Check if the row is in the current page\n      });\n      apiRef.current.setSelectionModel(firstSelectableRow !== undefined ? [firstSelectableRow] : []);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, disableMultipleSelection, isRowSelectable, pagination, paginationMode]);\n};","map":{"version":3,"names":["_extends","React","GridEvents","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridRowsLookupSelector","gridSelectionStateSelector","selectedGridRowsSelector","selectedIdsLookupSelector","gridPaginatedVisibleSortedGridRowIdsSelector","gridFocusCellSelector","gridVisibleSortedRowIdsSelector","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GridCellModes","isKeyboardEvent","isNavigationKey","getVisibleRows","useGridVisibleRows","GRID_DETAIL_PANEL_TOGGLE_FIELD","getSelectionModelPropValue","selectionModelProp","prevSelectionModel","Array","isArray","selectionStateInitializer","state","props","_getSelectionModelPro","selection","selectionModel","useGridSelection","apiRef","logger","propSelectionModel","useMemo","current","lastRowToggled","useRef","unstable_updateControlState","stateId","propModel","propOnChange","onSelectionModelChange","stateSelector","changeEvent","selectionChange","checkboxSelection","disableMultipleSelection","disableSelectionOnClick","isRowSelectable","pagination","paginationMode","canHaveMultipleSelection","visibleRows","expandMouseRowRangeSelection","useCallback","id","_lastRowToggled$curre","endId","startId","isSelected","isRowSelected","visibleRowIds","startIndex","findIndex","rowId","endIndex","selectRowRange","setSelectionModel","model","currentModel","debug","setState","forceUpdate","includes","getSelectedRows","selectRow","resetSelection","getRowParams","newSelection","filter","el","push","isSelectionValid","length","selectRows","ids","selectableIds","selectionLookup","forEach","Object","values","getRow","allPagesRowIds","indexOf","start","end","rowsBetweenStartAndEnd","slice","selectionApi","removeOutdatedSelection","currentSelection","rowsLookup","hasChanged","handleSingleRowSelection","event","hasCtrlKey","metaKey","ctrlKey","isMultipleSelectionDisabled","handleCellClick","params","field","column","getColumn","type","shiftKey","preventSelectionOnShift","_window$getSelection","window","getSelection","removeAllRanges","handleRowSelectionCheckboxChange","nativeEvent","value","handleHeaderSelectionCheckboxChange","shouldLimitSelectionToCurrentPage","checkboxSelectionVisibleOnly","rowsToBeSelected","handleCellKeyDown","getCellMode","Edit","currentTarget","contains","target","key","focusCell","preventDefault","isNextRowSelected","newRowIndex","getRowIndexRelativeToVisibleRows","previousRowIndex","rows","map","row","toLowerCase","getAllRowIds","sortedRowsSet","cellClick","rowSelectionCheckboxChange","headerSelectionCheckboxChange","cellMouseDown","cellKeyDown","useEffect","undefined","isStateControlled","currentPageRows","currentPageRowsLookup","reduce","acc","firstSelectableRow","find","isSelectable"],"sources":["/Users/yashkothari/project/blockchain_project/node_modules/@mui/x-data-grid/hooks/features/selection/useGridSelection.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridEvents } from '../../../models/events';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridVisibleSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { getVisibleRows, useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\n\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n\n  return [selectionModelProp];\n};\n\nexport const selectionStateInitializer = (state, props) => {\n  var _getSelectionModelPro;\n\n  return _extends({}, state, {\n    selection: (_getSelectionModelPro = getSelectionModelPropValue(props.selectionModel)) != null ? _getSelectionModelPro : []\n  });\n};\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\n\nexport const useGridSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const propSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.selectionModel, gridSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.selectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'selection',\n    propModel: propSelectionModel,\n    propOnChange: props.onSelectionModelChange,\n    stateSelector: gridSelectionStateSelector,\n    changeEvent: GridEvents.selectionChange\n  });\n  const {\n    checkboxSelection,\n    disableMultipleSelection,\n    disableSelectionOnClick,\n    isRowSelectable,\n    pagination,\n    paginationMode\n  } = props;\n  const canHaveMultipleSelection = !disableMultipleSelection || checkboxSelection;\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (isSelected) {\n      const visibleRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n\n      if (startIndex === endIndex) {\n        return;\n      }\n\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const setSelectionModel = React.useCallback(model => {\n    const currentModel = gridSelectionStateSelector(apiRef.current.state);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        selection: model\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const isRowSelected = React.useCallback(id => gridSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (isRowSelectable && !isRowSelectable(apiRef.current.getRowParams(id))) {\n      return;\n    }\n\n    lastRowToggled.current = id;\n\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n\n      if (isSelected) {\n        newSelection.push(id);\n      }\n\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n      if (isSelectionValid) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = isRowSelectable ? ids.filter(id => isRowSelectable(apiRef.current.getRowParams(id))) : ids;\n    let newSelection;\n\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n    if (isSelectionValid) {\n      apiRef.current.setSelectionModel(newSelection);\n    }\n  }, [apiRef, isRowSelectable, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`); // Using rows from all pages allow to select a range across several pages\n\n    const allPagesRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionApi = {\n    selectRow,\n    selectRows,\n    selectRowRange,\n    setSelectionModel,\n    getSelectedRows,\n    isRowSelected\n  };\n  useGridApiMethod(apiRef, selectionApi, 'GridSelectionApi');\n  /**\n   * EVENTS\n   */\n\n  const removeOutdatedSelection = React.useCallback(() => {\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef); // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      apiRef.current.setSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey; // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - CTRL is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleCellClick = React.useCallback((params, event) => {\n    if (disableSelectionOnClick) {\n      return;\n    }\n\n    if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n\n    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n\n    if (params.field) {\n      const column = apiRef.current.getColumn(params.field);\n\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandMouseRowRangeSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridVisibleSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    } // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n\n\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n\n    if (event.key.toLowerCase() === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, GridEvents.sortedRowsSet, removeOutdatedSelection);\n  useGridApiEventHandler(apiRef, GridEvents.cellClick, handleCellClick);\n  useGridApiEventHandler(apiRef, GridEvents.rowSelectionCheckboxChange, handleRowSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, GridEvents.headerSelectionCheckboxChange, handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, GridEvents.cellMouseDown, preventSelectionOnShift);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (propSelectionModel !== undefined) {\n      apiRef.current.setSelectionModel(propSelectionModel);\n    }\n  }, [apiRef, propSelectionModel]);\n  const isStateControlled = propSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled) {\n      return;\n    } // isRowSelectable changed\n\n\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(apiRef.current.getRowParams(id)));\n\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled]);\n  React.useEffect(() => {\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      const {\n        rows: currentPageRows\n      } = getVisibleRows(apiRef, {\n        pagination,\n        paginationMode\n      });\n      const currentPageRowsLookup = currentPageRows.reduce((acc, {\n        id\n      }) => {\n        acc[id] = true;\n        return acc;\n      }, {});\n      const firstSelectableRow = currentSelection.find(id => {\n        let isSelectable = true;\n\n        if (isRowSelectable) {\n          isSelectable = isRowSelectable(apiRef.current.getRowParams(id));\n        }\n\n        return isSelectable && currentPageRowsLookup[id]; // Check if the row is in the current page\n      });\n      apiRef.current.setSelectionModel(firstSelectableRow !== undefined ? [firstSelectableRow] : []);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, disableMultipleSelection, isRowSelectable, pagination, paginationMode]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}